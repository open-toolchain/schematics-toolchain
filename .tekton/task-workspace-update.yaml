apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: update-workspace-task
spec:
  params:
    - name: ibmcloud-apikey-secret-key
      description: field in the secret that contains the api key used to login to ibmcloud
      default: apikey
    - name: continuous-delivery-context-secret
      description: Reference name for the secret resource
      default: "secure-properties"
    - name: WORKSPACE_ID
      description: the workspace id
    - name: ibmcloud-api
      description: the ibmcloud api
      default: https://cloud.ibm.com
    - name: apikey
      description: the ibmcloud api key
    - name: enable-automatic-plan-apply
      description: if true, a plan and apply will be automatically executed upon changes to the template code
  workspaces:
    - name: artifacts
      mountPath: /artifacts
  steps:
    - name: update-workspace
      image: icr.io/continuous-delivery/pipeline/pipeline-base-ubi:3.2
      envFrom:
        - configMapRef:
            name: environment-properties
        - secretRef:
            name: secure-properties
      env:
        - name: API_KEY
          valueFrom:
            secretKeyRef:
              name: $(params.continuous-delivery-context-secret)
              key: $(params.ibmcloud-apikey-secret-key)
              optional: true
        - name: WORKSPACE_ID
          value: $(params.WORKSPACE_ID)
        - name: IBM_CLOUD_API
          value: $(params.ibmcloud-api)
        - name: ENABLE_PLAN_APPLY
          value: $(params.enable-automatic-plan-apply)
      command: ["/bin/bash", "-c"]
      args:
        - |
          #!/bin/bash

          if [ "$ENABLE_PLAN_APPLY" != "true" ]; then
            echo "Automatic plan and apply have been disabled. Re-enable by setting the enable-automatic-plan-apply environment property to true."
            exit 0
          fi
          
          echo "Workspace $WORKSPACE_ID"

          REGION="--no-region"
          # only parse the region if its the *NEW* workspace id format
          if [[ "$WORKSPACE_ID" == *".workspace"* ]]; then
              REGION=" -r $(echo $WORKSPACE_ID | cut -f1 -d.)"
          fi
          echo "REGION: $REGION"

          # force login (required by schematics cli)
          ibmcloud login --apikey $API_KEY -a "$IBM_CLOUD_API" $REGION
          # get schematics workspace as json
          WORKSPACE=$(ibmcloud terraform workspace get -i $WORKSPACE_ID --json)
          echo "Updating Schematics workspace from environment variables..."
          # iterate over ALL schematics worskpace variables to see if there is a matching env var

          if jq -e . >/dev/null 2>&1 <<<"$WORKSPACE"; then
              echo "$WORKSPACE" > "temp.json"
          else
              echo "$WORKSPACE" | head -n -1 > "temp.json"
          fi

          for KEY in $(cat temp.json | jq ".template_data[0].values_metadata[].name" -r); do
              
              # if the value exists as an env var, update the workspace
              if [ -n "${!KEY}" ]; then
                  echo "$KEY found with value '${!KEY}'"; 
                  SEARCH=$(cat temp.json | jq ".template_data[0].variablestore[]?.name")

                  echo "$SEARCH"
                  
                  if [[ "$SEARCH" =~ .*"$KEY".* ]]; then
                      echo "It's there, update it."
                      WORKSPACE=$(cat temp.json | jq -r \
                          --arg updateKey "$KEY" \
                          --arg updateVal "${!KEY}" \
                          '.template_data[0].variablestore = [.template_data[0].variablestore[] | if (.name == $updateKey) then (.value = $updateVal) else . end]' )
                  else 
                      echo "It's NOT there, add it."
                      WORKSPACE=$(cat temp.json| jq -r ".template_data[0].variablestore[.template_data[0].variablestore| length] |= . + { \"name\": \"$KEY\", \"value\": \"${!KEY}\", \"type\": \"string\" }")
                      
                  fi
              fi
          done
          
          echo "$WORKSPACE" > "workspace.json"
          ibmcloud terraform workspace update --id $WORKSPACE_ID --file workspace.json

          # cleanup
          rm -f workspace.json

          sleep 10
          unset WORKSPACE
